#! /usr/share/python
import argparse
import MDAnalysis as mda
from datetime import datetime
from CodeEntropy.main_mcc import main

try:
    parser = argparse.ArgumentParser(description="""
    CodeEntropy-POSEIDON is a tool to compute entropy using the multiscale-cell-correlation (MCC) theory and force/torque covariance methods with the ablity to compute solvent entropy. 
    Version:
        0.3.1;

    Authors: 
        Arghya Chakravorty (arghya90),
        Jas Kalayan (jkalayan),
        Donald Chang,
        Sarah Fegan
        Ioana Papa;

    Output:
        *.csv = results from different calculateion,
        *.pkl - Pickled reduced universe for further analysis,
        *.out - detailed output such as matrix and spectra""")
    
    
    parser.add_argument('-f', '--top_traj_file',
                        required=True,
                        dest="filePath",
                        action='store',
                        nargs='+',
                        help="Path to Structure/topology file (AMBER PRMTOP, GROMACS TPR which contains topology and dihedral information) followed by Trajectory file(s) (AMBER NETCDF or GROMACS TRR) you will need to output the coordinates and forces to the same file. Required.")
    parser.add_argument('-l', '--selectString', 
                        action='store',
                        dest="selectionString",  
                        type=str,
                        default='all',
                        help='Selection string for CodeEntropy such as protein or resid, refer to MDAnalysis.select_atoms for more information.')
    parser.add_argument('-b', '--begin', 
                        action="store", 
                        dest="start", 
                        help="Start analysing the trajectory from this frame index. Defaults to 0", 
                        default=0, 
                        type= int)
    parser.add_argument('-e', '--end', 
                        action="store", 
                        dest="end", 
                        help="Stop analysing the trajectory at this frame index. Defaults to -1 (end of trajectory file)", 
                        default=-1,
                        type=int)
    parser.add_argument('-d', '--step', 
                        action="store", 
                        dest="step", 
                        help="interval between two consecutive frames to be read index. Defaults to 1", 
                        default=1,
                        type=int)
    parser.add_argument('-k', '--tempra', 
                        action="store", 
                        dest="temp", 
                        help="Temperature for entropy calculation (K). Default to 298.0 K", 
                        default=298.0, 
                        type=float)
    parser.add_argument('-t', '--thread', 
                        action="store", 
                        dest="thread", 
                        help="How many multiprocess to use. Default 1 for single core execution.", 
                        default=1, 
                        type=int)
    parser.add_argument("-o","--out",
                        action="store",
                        dest  ="outFile",
                        default="outfile.out",
                        help   ="Name of the file where the output will be written. Default: outfile.out")
    parser.add_argument("--verbose",
                        action="store",
                        dest="verbose",
                        default=False,
                        type=bool,
                        help="True/False flag for noisy or quiet output. Default: False")
    parser.add_argument("-r","--resout",
                        action="store",
                        dest  ="resOutFile",
                        default="res_outfile.out",
                        help   ="Name of the file where the residue entropy output will be written. Default: res_outfile.out")

    parser.add_argument("-m", "--mout",
                        action="store",
                        dest  ="moutFile",
                        default=None,
                        help   ="Name of the file where certain matrices will be written (default: None).")

    parser.add_argument('-a', '--rotationalaxis', 
                        dest = "rotationalAxis",
                        action='store', 
                        nargs='+',
                        default=None, 
                                                help="Optional: The 3 atom name in each residue for rotational axis. Default none.")
    parser.add_argument('-c', '--cutShell', 
                        action='store',
                        dest="cutShell",
                        default=None, 
                        type=float,
                        help='include cutoff shell analysis, add cutoff distance in angstrom Default None will ust the RAD Algorithm')
    parser.add_argument('-p', '--pureAtomNum', 
                        action='store',
                        dest="puteAtomNum", 
                        default=1, 
                        type=int,
                        help='Reference molecule resid for system of pure liquid. Default to 1')
    parser.add_argument('-x', '--excludedResnames', 
                        dest="excludedResnames",
                        action='store', 
                        nargs='+',
                        default=None, 
                        help='exclude a list of molecule names from nearest non-like analysis. Default: None. Multiples are gathered into list.')
    parser.add_argument('-w', '--water',
                        dest = "waterResnames",
                        action='store', 
                        default='WAT',
                        nargs='+', 
                        help='resname for water molecules. Default: WAT. Multiples are gathered into list.')
    parser.add_argument('-s', '--solvent',
                        dest="solventResnames", 
                        action='store', 
                        nargs='+',
                        default=None, 
                        help='include resname of solvent molecules (case-sensitive) Default: None. Multiples are gathered into list.')
    parser.add_argument("--solContact",
                        action="store_true",
                        dest  ="doSolContact",
                        default=False,
                        help  ="Do solute contact calculation")

    args = parser.parse_args()
except argparse.ArgumentError:
    print('Command line arguments are ill-defined, please check the arguments')
    raise

                        
############## REPLACE INPUTS ##############
print("printing all input")
for arg in vars(args):
    print(' {} {}'.format(arg, getattr(args, arg) or ''))

startTime = datetime.now()

# create dictonary of inputs to be passed to the main function
arg_dict = {}

arg_dict['outfile'] = args.outFile
arg_dict['temper'] = args.temp
arg_dict['selection_string'] = args.selectionString
arg_dict['start'] = args.start
arg_dict['end'] = args.end
arg_dict['step'] = args.step
arg_dict['thread'] = args.thread
arg_dict['verbose'] = args.verbose
arg_dict['axis_list'] = args.rotationalAxis
arg_dict['moutFile'] = args.moutFile
arg_dict['resfile'] = args.resOutFile

arg_dict['cutShell'] = args.cutShell
arg_dict['puteAtomNum'] = args.puteAtomNum
arg_dict['excludedResnames'] = args.excludedResnames
arg_dict['waterResnames'] = args.waterResnames
arg_dict['solventResnames'] = args.solventResnames

# Get topology and trajectory file names and make universe
tprfile = args.filePath[0]
trrfile = args.filePath[1:]
u = mda.Universe(tprfile, trrfile)
arg_dict['universe'] = u

main(arg_dict)
